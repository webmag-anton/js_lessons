ООП               +
switch            +
Map, Set          +
canvas            +
SPA               +
nodeJs            +
webpack           +
react             +
JSX               +
redux             +
typeScript        +
patterns



   to Do list:
конспект VSC & Sublime на github                                              +
довести до ума Gulp сборку                                                    +
сделать все конспекты по learn_js в одном стиле под VSC                       +
сохранить в облако все проекты infosource                                     +
выложить в облако все фоотки в infosource                                     +
скинуть свои фотки в облако с компа                                           +
выложить в облако доки по энтивио                                             +
создать новую рабочую почту gmail







MVC - паттерн, который рашает задачу разделения визуального представления (view) и данных (model). Model и 
      view не взаимодействуют между собой напрямую, связь происходит через controller.




-  интерфейс в классе - это его методы
-  эмплементация метода это реализация, создание
-  инстанцирование - создание экземпляра класса
-  разная реализация метода toString() у встроенных классов это так же пример полиморфизма
-  расширение интерфейса родительского класса (полиморфизм), а так же дженерики (TypeScript) - проверка типа аргумента ф-ии

почитать про разницу между между интерфейсом и абстрактным классом





------- React -------


   Селекторы - это ф-ии, которые используются в mapStateToProps в качестве значений что бы возвращать из Store нужные данные, 
вместо того чтобы вручную прописывать, например, state.users.flags...

   В рекурсии обязательно должно быть условие прерывание этой рекурсии, иначе произойдет зацикленность и stackOverflow.
Так же и в хуке componentDidUpdate(), если в нем указан какой то side-effect (запрос на сервер, setTimeout...) меняющий
локальный state или пропсы этого компонента, то это приведет к обновлению компонента и процесс зациклится. Поэтому в таких 
ситуация должно быть условие, когда не произойдет изменение стейта или пропсов у компонента.




   Если в mapStateToProps нужно сделать вычисление из нескольких получаемых полей из Store, чтобы на их основании передать 
значение новому полю, которое создаю в mapStateToProps (и которого нет в Store), то удобно использовать библиотеку Reselect.
Возможно если вычисленное значение не выполняет какое то условие, то не нужно создавать новое поле