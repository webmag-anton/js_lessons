ООП               +
switch            +
Map, Set          +
canvas            +
SPA               +
nodeJs            +
webpack           +
react             +
JSX               +
redux             +
typeScript
patterns



   to Do list:
конспект VSC & Sublime на github                                              +
довести до ума Gulp сборку                                                    +
сделать все конспекты по learn_js в одном стиле под VSC                       +
сохранить в облако все проекты infosource                                     +
выложить в облако все фоотки в infosource                                     +
скинуть свои фотки в облако с компа                                           +
выложить в облако доки по энтивио                                             +
создать новую рабочую почту gmail







MVC - паттерн, который рашает задачу разделения визуального представления (view) и данных (model). Model и 
      view не взаимодействуют между собой напрямую, связь происходит через controller.




-  интерфейс в классе - это его методы
-  эмплементация метода это реализация, создание
-  инстанцирование - создание экземпляра класса
-  разная реализация метода toString() у встроенных классов это так же пример полиморфизма
-  расширение интерфейса родительского класса (полиморфизм), а так же дженерики (TypeScript) - проверка типа аргумента ф-ии

почитать про разницу между между интерфейсом и абстрактным классом





------- React -------




   


   Посмотреть по React:
- setState асинхронна, поэтому для выполнения кода сразу после установки состояния, нужно передавать 2м параметром 
  callback, а 1й параметр или объект с состоянием или ф-я, принимающая prevState, props и возвращающая объект
- pure component
- мемизация


   Для пагинации в React:
- в http get-запросе к серверу указываем в параметрвах запроса страницу, которую нужно открыть и 
  количество элементов на 1 странице, например: 'api/users?page=1&pageSize=10';
  на серве может стоять ограничение по количеству запрашиваемых элементов, что бы не перегружаться; об этом
  говорится в документации;
- далее сервер делает запрос к базе данных (mongoDB, MySQL...), получает от нее ответ и затем отвечает нам;
  в ответе есть общее количество элементов totalCount, с помощью которого мы динамически вычисляем количество 
  страниц для отрисовки путем деления всех элементов на количество элементов на странице: totalCount/pageSize 




   Набор url-адресов, на которые можно слать запросы, являетя серверным api, т.к. мы взаимодействуем с сервером, 
указывая в запросе url.



   Контролируемые элементы в React - элементы, значение атрибутов которых генерируется динамически из пропсов или из state.

   Селекторы - это ф-ии, которые используются в mapStateToProps в качестве значений что бы возвращать из Store нужные данные, 
вместо того чтобы вручную прописывать, например, state.users.flags...


   В рекурсии обязательно должно быть условие прерывание этой рекурсии, иначе произойдет зацикленность и stackOverflow.
Так же и в хуке componentDidUpdate(), если в нем указан какой то side-effect (запрос на сервер, setTimeout...) меняющий
локальный state или пропсы этого компонента, то это приведет к обновлению компонента и процесс зациклится. Поэтому в таких 
ситуация должно быть условие, когда не произойдет изменение стейта или пропсов у компонента.




