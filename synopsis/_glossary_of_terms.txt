check in / sign up - зарегистрироваться
log in / sign in - авторизоваться (войти в систему)
validation - проверка
verification - подтверждение
reboot - перезагрузка
draft - черновик
cheatsheet - шпаргалка
feature - особенность
undo - отменить
issue - проблема (задача)
contributors - авторы
idle - неработающий, простаивающий
sketch - эскиз
wireframe - каркас
mock up - макет
appearance - внешний вид
e.g. - например
utility - вспомогательный, полезный
occur - случаться
toolkit - набор инструментов
evaluate - оценивать
agregate - совокупность
expand/collapse - развернуть/свернуть
miscellaneous (misc) - разные 
request, responce - запрос, ответ
maintaince - поддержание (проекта)
encode / decode - кодировать / раскодировать
транслитерация - передача знаков одной письменности знаками другой (латиницей русские слова)
boilerplate code - шаблонный код, который должен быть написан во многих местах практически без изменений
credentials - полномочия
parsing - чтение (разбор)
rendering - отображение (отрисовка)
vulnerabilities - уязвимости
polyfill -  код, написанный в старом стандарте для замещения встроенных функций, которых не 
            существует в старых браузерах; а транспилер (babel) переписывает код, преобразовывая 
            новые синтаксические конструкции (не путать со встроенными функциями) в старые
privicy policy - политика конфиденциальности
alias - псевдоним для длинной команды (более короткий)
scrollbar - полоса прокрутки (bar - панель)
timestamp - отметка времени
fps - frames per second (кадров в секунду)
+, -, *, / - sum, sub, mult, div
shortcut / keybinding - сочетание клавиш
snippet - фрагмент кода, разворачиваемый табулированием специального prefix'а
crutch - костыль (обход)
compatibility - совместимость
relese - выпуск (новой версии)
extract - извлекать
hash - мешанина
token - знак
иммутабельность - неизменяемость (объектов)
chunks - фрагмент, кусок
emplementation - реализация, создание (метода)
expires - истекает (expires in 2 days)
прототип - схематичное изображение страницы или виджета, которое показывает какие 
           есть блоки и сущности; этап прототипирования следует за исследованием, 
           перед созданием дизайна
teammate - товарищ по команде
интерфейс — общая граница» между отдельными системами, через которую они взаимодействуют;
            клавиатура, мышь и пр. устройства ввода — элементы внешнего интерфейса «человек — компьютер»;
            руль и педали - внешний интерфейс авто, а все что под капотом - внутренний скрытый интерфейс
внутренний интерфейс – методы и свойства, доступные из других методов класса, но не снаружи класса
внешний интерфейс – методы и свойства, доступные снаружи класса
API (Application Programming Interface) - программный интерфейс приложения. Проще говоря, это то, что 
                                          обеспечивает эффективный процесс коммуникаций между программами, 
                                          использующими функции и ресурсы друг друга; то есть это набор публичных 
                                          свойств и методов (внешний интерфейс) для взаимодействия с програмой
CLI (Command line interface) - интерфейс командной строки; также известен под названиями «консоль» 
                               и «терминал»; он противопоставляется системам управления программой
                               на основе меню, а также различным реализациям графического интерфейса
шаблонизатор — программное обеспечение, позволяющее использовать html-шаблоны для генерации конечных 
               html-страниц. Основная цель использования шаблонизаторов — это отделение представления 
               данных от исполняемого кода. Часто это необходимо для обеспечения возможности  
               параллельной работы программиста и верстальщика; в JS популярен шаблонизатор Handlebars
одностраничное приложение (SPA) - это веб-приложение или веб-сайт, который взаимодействует с веб-браузером, 
                                  динамически переписывая текущую веб-страницу новыми данными с веб-сервера, 
                                  вместо того, чтобы по умолчанию браузер загружал целые новые страницы. 
                                  Цель - более быстрые переходы, которые делают сайт более похожим на нативное 
                                  приложение. В SPA все необходимые коды HTML, JavaScript и CSS либо извлекаются 
                                  браузером с одной загрузкой страницы, либо соответствующие ресурсы динамически 
                                  загружаются и добавляются на страницу по мере необходимости, обычно в ответ на 
                                  действия пользователя. Страница не перезагружается в любой точке процесса и не 
                                  передает управление на другую страницу, хотя хэш местоположения можно 
                                  использовать для обеспечения восприятия и навигации по отдельным логическим 
                                  страницам в приложении.
                                  SPA использует единственный HTML-документ как оболочку для всех веб-страниц 
                                  и организует взаимодействие с пользователем через динамически  
                                  подгружаемые HTML, CSS, JavaScript, обычно посредством AJAX
REST API —  (Representational State Transfer — «передача состояния представления»). По сути это API 
            сервера: набор публичных свойств и методов сервера для взаимодействия с ним. В документациях 
            прописывается правила взаимодействия: на какой url слать запрос (Endpoint), какого типа делать 
            запрос, что отправлять в запросе...
endpoint —  url-адрес, на который мы шлем запрос на сервер, например для авторизации (то есть это 
            интерфейс сервера)
CDN — content delivery network (сеть доставки контента)


command prompt - командная строка
clipboard - буфер обмена
reassign - переприсвоить (переменную)
`` - строковые литералы (обратные кавычки), для создания шаблонов
контекст функции - значение this внутри функции
scope - область видимости (глобальная, функциональная, блочная)
hoisting - все объявления переменных var «всплывают» в самый верх функции со значением undefined;
           так же всплывают и function declaration (можно вызывать до объявления), в отличае от FE
модуль - это многократно используемая часть кода, инкапсулирующая 
         детали реализации и предоставляющая открытый API
замыкание (closure) - это когда функция имеет доступ до переменных из вышестоящего scope (функция 
                      внутри функции), то есть она замыкает в себе значения этих переменных; это 
                      значит что только эта функция имеет к ним доступ
IIFE (immediately-invoked function expressions) - функция, запускаемая сразу после объявления, 
                                                  использовалась в ES5- вместо модулей для 
                                                  создани собственной области видимости
callback - это функция, переданная в другую функцию в качестве аргумента, которая затем 
           вызывается по завершению какого-либо действия. Функции обратного вызова часто 
           используются для продолжения выполнения кода после завершения асинхронной 
           операции - они называются асинхронными обратными вызовами
валидация - проверка (введённых данных)
верификация - процесс подтверждения подлинности данных (подтверждение аккаунта)
декоратор - это обёртка вокруг функции, которая изменяет поведение последней; основная работа 
            по-прежнему выполняется функцией
каррирование - это трансформация, которая дает возможность частичного вызова ф-ии: f(a)(b)(c) 
               вместо обычного вызова f(a, b, c); это позволяет создавать частично 
               применённые ф-ии; возможна реализация методом bind()
dispatch - отправка (вызов события)
функция высшего порядка —  это функция, которая может принимать другую функцию в качестве 
                           аргумента или возвращать другую функцию в качестве результата
URL (Uniform Resource Locator) — это URI (Uniform Resource Identifier), который, помимо идентификации 
                                 ресурса, предоставляет ещё и информацию о местонахождении этого ресурса
CORS (Cross-Origin Resource Sharing) - совместное использование ресурсов между разными источниками
                                       ( источник (origin) – комбинация домен/порт/протокол )
инстанцирование - создание экземпляра класса
runtime - во время выполнения



JS —  прототипно-ориентированный мультипарадигменный язык програмирования, который поддерживает императивный, 
      декларативный (https://habr.com/ru/post/324688/), функциональный и объектно-ориентированный стили
функциональное програмирование - когда функции становятся объектами первого класса, то есть могут
                                 принимать другую функцию в качестве аргумента или возвращать другую 
                                 функцию в качестве результата
однопоточность —  JavaScript работает в однопоточном режиме (один стек вызовов), т.е. 
                  только одна операция может быть выполнена в определенный момент времени 
стек вызовов —  структура данных в JS, которая в основном записывает, где мы находимся в программе. 
                Если мы переходим в функцию, мы помещаем ее на вершину стека. Если мы возвращаемся из 
                функции, мы убирает ее из верхней части стека. Каждая запись в стеке вызовов называется 
                кадром стека (stack trace). 
      Когда движок начнет выполнять этот код, стек вызовов будет пуст. После этого шаги будут следующими:
function multiply(x, y) {
  return x * y
  console.trace()  // выведет текущий call stack в консоль
}
function printSquare(x) {
  var s = multiply(x, x)
  console.log(s)
}
printSquare(4)
                                              call stack:
step 1           ->       step 2       ->       step 3       ->       step 4       ->   step 5 (empty stack)

                      multiply(x, x)        console.log(s)    
printSquare(4)        printSquare(4)        printSquare(4)        printSquare(4)     

синхронное выполнение кода —  код выполняется синхронно, т.е. следующая операция не выполняется 
                              до завершения предыдущей (например пока не закроется alert)
кроссплатформенный язык —  использующийся в разных сферах (в браузере, на веб-сервере, в 
                           кофеварке); каждая среда предоставляет свой функционал, который 
                           спецификация JavaScript называет окружением
динамическая типизация —  возможность переменной любого типа присвоить другой тип: переменной 
                          строкового типа присвоить число (это плохо для больших проектов); в 
                          js возможность написания кода со статической типизацией дает TypeScript
compilation - преобразование программы, при котором используется исходный код программы, написанной 
              на одном языке программирования в качестве исходных данных, и производится эквивалентный 
              исходный код на другом языке программирования (т.е. языки с разными уровнями абстракции, 
              в отличае от транспиляции)
transpilation - подвид компиляции (source-to-source compiler), при котором преобразование происходит для языка
                с тем же уровнем абстакции (например TS в JS) или в другую версию того же языка (например Babel)
обратная совместимость - например, SCSS понимат CSS или TS понимает JS, т.е. обратно совместим
refactoring, или переработка кода - процесс изменения внутренней структуры программы, не затрагивающий её 
                                    внешнего поведения и имеющий целью облегчить понимание её работы (например, 
                                    вынесение повторяющегося кода в ф-ии, подключение redux к приложению...).
                                    То есть рефакторинг, это когда поведение програмы одно и тоже, а код меняется
декомпозиция - разделение целого на части
обфускация — приведение исходного текста или исполняемого кода программы к виду, сохраняющему её 
             функциональность, но затрудняющему анализ, понимание алгоритмов работы и модификацию при декомпиляции

Babel - транспилирует ES6+ в обратно-совместимую версию JavaScript (ES5-), которую могут запускать 
        старые движки JS. Нестандартный синтаксис JavaScript, такой как JSX, также можно преобразовать
        c помощью Babel. Так же Babel предоставляет полифилы для поддержки функций, которые полностью 
        отсутствуют в средах JavaScript. Например, статические методы, такие как Array.from, и встроенные, 
        такие как Promise, доступны только в ES6+, но их можно использовать в более старых версиях, если 
        используется полифил Babel. 
        Т.е. Babel переписывает код, преобразовывая новые синтаксические конструкции (не путать 
        со встроенными функциями) в старые с помощью babel-плагинов или пресетов (наборов плагинов).
        пример плагинов: 
        @babel/preset-react для траспилции JSX; 
        @babel/plugin-proposal-class-properties для транспиляции статических свойств/методов класса
        А polyfill - код, написанный в старом стандарте для замещения встроенных функций, которых 
        не существует в старых браузерах. Два интересных хранилища полифилов, помимо @babel/polyfill:
          core js (www.npmjs.com/package/core-js) - поддерживает много функций, можно 
                                                    подключать только нужные
          polyfill.io (polyfill.io) - сервис, который автоматически создаёт скрипт с полифилом 
                                      в зависимости от необходимых функций и браузера пользователя
TypeScript - компилируемый обратно-совместимый язык (надстройка над js) со строгой типизацией. 
             Компилируемый (точнее транспилируемый) - означает, что TS будет скомпилирован в JS. 
             Обратно-совместимый - означает, что если в компилятор попадает синтаксис JS, то 
             соответственно этот кусок и возращается. 
             TypeScript это статически-типизируемый JS, который в основном служит для создания 
             сложных и больших приложений

