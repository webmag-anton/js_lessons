      в приложении:
- для авторизированного пользователя виден список всех заданных кем либо вопросов
- в разделе Ваши вопросы на странице видны вопросы конкретного пользователя, а 
  после входа автора в модалке выводятся все вопросы от всех пользователей

1.    
      webpack:
- npm init
- npm i -D webpack webpack-cli webpack-dev-server
- создаю webpack.config.js
- в package.json создаю script start для запуска webpack-dev-server в режиме 
  developmemt (--mode development) и с флагом --open (чтобы сервер автоматом 
  открывал в браузере);
  и скрипт build для того, чтобы webpack собирал проект в режиме 
  production (--mode production), должна появиться папка public
- npm i -D html-webpack-plugin clean-webpack-plugin
- npm i -D style-loader css-loader

2.    
- подключаем html разметку макета Blog из MUI framework и css, js этого layout (чтобы 
  webpack понимал css подключаем css-loader (npm i -D style-loader css-loader))
- немного модифицирую макет, добаляю поле для задания вопросов и т.д.
- валидирую поле и кнопку; валидацию импортирую из файла utils.js

3.
- создаем проект на firebase и создаем realtime dataBase в тестовом режиме (чтобы
  писать в DB мог любой пользователь, даже без авторизации, а читать только авторизованый)
- создаю question.js для хранения всех сущностей и всей логики, относящейся к вопросам
- для локального сохранения вопросов, которые задавал человек, будем использовать 
  localStorage; после задания вопроса мы обновляем список вопросов в localStorage и 
  рендерим на страницу html-шаблон из этих вопросов: мэпим из массива в localStorage 
  html-карточки вопросов, а затем из массива карточек делаем строку методом join(''),
  которую добавляем (innerHTML) на страницу
- чтобы рендерить вопросы при загрузке страницы, а не только при задании вопроса, 
  добавляем слушатель события 'load' у window
  
4.
- добавляем float кнопку для авторизации, при клике на которую открываем модалку, разметку
  которой берем в MUI framework в разделе Overlay; в MUI модалка вызввается определенным
  образом (показано на их сайте в примере - mui.overlay('on', modalEl)). Можно сделать это
  понятней, вынеся этот вызов в функцию createModal в utils.js
- создаем отдельный модуль auth.js, отвечающий за авторизацию; в нем экспортируем функцию
  по созданию разметки формы - getAuthFormHTML и функцию authWithEmailAndPassword - для 
  авторизации в Firebase
- в Firebase во вкладке Authentication в способе входа включаем по почте и паролю
- добавляем пользователя во вкладке Authentication - users (test@gmail.com, 123456)
- ищем документацию по аутентификации - гуглим: firebase rest auth; далее в 'Sign in with 
  email / password' копируем Endpoint:
  https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=[API_KEY]
- в Firebase во вкладке Database меняем значение поля read на   ".read": "auth != null", 
  чтобы читать из DB могли только авторизированные пользователи
- в ответе при аутентификации нас интересует только поле idToken, с помощью которого можно
  делать запрос на сервер для получения списка всех вопросов; запрос будем делать методом 
  fetch, который является статическим методом объекта Question в question.js (все что связано 
  с вопросами в question.js)
- чтобы передавать token при запросе всех вопросов, в метод fetch в question.js
  передаем параметр ?auth=${token}
- после получения списка всех вопросов рендерим модалку с их списком; создаем для этого метод 
  listToHTML в question.js