   Можно было не использовать Gulp + Webpack, а все собрать с помощью Webpack

   Не заметил разницу между browsersync.stream() и browserSync.reload({stream: true}), и то
и то перезагружает страницу без изменения положения прокрутки; 
   Но для стилей вместо .on('end', browsersync.reload) нельзя использовать .on('end', browsersync.stream)


         в package.json:
- поле browserslist отвечает за поддержку браузеров в проекте (> 1% удовлетворяет 
  требованиям в тз по поддержке IE11, Edge, т.к. у них > 1% популярности)
- пакет core-js дополняет функционал babel полифилами



1.
- вместо 
   <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
   <script src="assets/slick/slick.min.js"></script>
  подключаем <script src='./script.js'></script> в index.html  (script.js собирается webpack'ом)
- устанавливаем jquery для работы уже стоявшего slick (npm i jquery --save), что бы не 
  подключать как она стояла изначально через googleapis, а через модуль; и таким же образом 
  устанавливаем модуль slick-carousel (npm i slick-carousel --save) и импортируем их 
  в js/slider.js, а js/slider.js импортируем в main.js (import './slider')
- создаем папку modules в /js, в которой будут модули для конкретных задач тз; для модалок
  создаем js/modules/modals.js  -  1, 2, 10 пункт тз; 
  импортируем функционал из модуля в main.js (import modals from './modules/modals')

2.
- реализуем табы в модуле tabs.js - 5, 7 пункт тз; 

3.
- всего 6 одинаковых форм обратной связи и 1 продвинутая форма с калькулятором (4 последовательные 
  модалки с формами для заполнения); реализуем работу с формами (отправка с помощью ajax);
  нужен любой локальный сервер, который поддерживает post-запросы (OpenServer подойдет; browser-sync 
  и live-reload не подойдут, они поддерживают только get-запросы); создаем модуль forms.js
- после отправки формы на сервер будем очищать все инпуты во всех формах; также необходимо оповестить 
  пользователя о состоянии отправки (идет отправка, отправлено, ошибка)
- перед отправкой нужно знать какой формат данных принимает сервер (url-encoded, JSON, FormData или
  какой то другой формат); мы будем использовать FormData; 
- серверный php файл server.php возвращает (в виде строки) массив тех данных, которые пользователь 
  отправил; поэтому к полученному результату post-запроса применяем метод text() (для декодирования 
  в строку), а не json()
- чтобы проверить функционал отправки формы и получения ответа, создаем в OpenServer в /domains папку 
  /test; 
  а в gulpfile.js меняем значение переменной dist на 'D:/Anton/OSPanel/domains/test' и перезапускаем 
  gulp, что бы проект собрался в папке /test;
  затем запускаем /test на OpenServer для тестирования: после отправки в консоле видны данные, которые
  отдает сервер;
  если поставить slow 3G и отправить, то видна 'Загрузка...', а если поставить offline - 'Что то 
  пошло не так...'
- по ТЗ, в поле с телефоном можно вводить только цифры; есть 2 пути: 1. поставить инпуту type='number',
  но бывает что у нас либо нет самого html или инпуты сделаны div'ами, поэтому такой вариант не подошел
  бы; 2. в качестве тренировки сделаем более универсальный вариант - просто при вводе будем заменять не
  цифры пустой строкой методом replace() 

4.
- в форме popup_calc при клике на маленькие картинки с формами балкона, нужно под ними показывать 
  большую картинку, поэтому делаем как табы;
- в форме popup_calc последовательно открываются несколько модалок, поэтому при открытии следующей,
  предыдущая должна закрываться; при клике на оверлей, будем закрывать только первую по счету модалку,
  а остальные только крестиком
- добавляем всем модалкам с калькулятором (3шт) data-modal, чтобы в popup_calc закрывать все модалки с 
  data-modal перед открытием следующей
- в main.js создаем объект состояния modalState, в который собираем данные из 3 модалок с калькулятором 
  перед итоговой отправкой на сервер; В modalState будем записывать форму балкона, ширину, высоту, тип 
  остекления, профиль остекления. Логика будет в модуле changeModalState.js
- так как ширина и высота остекления задается только числами, то выносим ранее созданную ф-ю по 
  изменению нечисленных значений пустой строкой, которуя приминяли для телефона в формах, в отдельный 
  модуль checkNumInputs.js, который импортируем в forms.js для валидации полей с телефоном и в модуль
  changeModalState.js для валидации ширины и высоты
- при отправлении формы в калькуляторе (последняя модалка - имя/телефон), нужно к ней добавить собранные
  данные из объекта состояния modalState. Для этого помечаем форму дата аттрибутом data-calc='end', и 
  прописываем условие что если мы отправляем форму с аттрибутом data-calc='end', то перед отправкой 
  добавляем объекту formData данные из modalState

5.
- можно сделать еще 3 дополнения, которых нет в ТЗ: - закрытие модалки после отправки; 
                                                    - очистка состояния после отправки;
                                                    - проверки на заполненность полей в калькуляторе, 
                                                      чтобы нельзя было перейти к следующей форме, если 
                                                      не заполнены все поля (не делал)
- создаем модуль для таймера timer.js
- ддя анимации в табах (ОСТЕКЛЕНИЕ БАЛКОНОВ И ЛОДЖИЙ) добавляем класс faded классам glazing_content 
  и прописывам стили в css
- убираем смещение содержимого при открытии модалки из-за пропадания скролла; в modals.js добавляем
  фун-ю calcScroll
6.
- собираем producion сборку: gulp build-prod-js